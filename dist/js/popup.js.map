{"version":3,"file":"js/popup.js","mappings":"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","sources":["webpack://highlighter/./src/popup/popup.ts"],"sourcesContent":["\"use strict\";\n// Whitelist management\nasync function getWhitelist() {\n    const { whitelistedSites = [] } = await chrome.storage.sync.get({ whitelistedSites: [] });\n    return whitelistedSites;\n}\nasync function addToWhitelist(url) {\n    const whitelistedSites = await getWhitelist();\n    const hostname = new URL(url).hostname;\n    if (!whitelistedSites.includes(hostname)) {\n        whitelistedSites.push(hostname);\n        await chrome.storage.sync.set({ whitelistedSites });\n    }\n}\nasync function isWhitelisted(url) {\n    const whitelistedSites = await getWhitelist();\n    const hostname = new URL(url).hostname;\n    return whitelistedSites.includes(hostname);\n}\n// Update status display\nasync function updateStatus() {\n    const statusElement = document.getElementById('status');\n    const { highlightSettings } = await chrome.storage.sync.get({\n        highlightSettings: {\n            apiKey: '',\n            baseUrl: 'https://api.openai.com',\n            model: 'gpt-3.5-turbo'\n        }\n    });\n    if (statusElement) {\n        const statusActive = statusElement.querySelector('.status-active');\n        const statusInactive = statusElement.querySelector('.status-inactive');\n        if (highlightSettings?.apiKey) {\n            statusActive?.classList.remove('hidden');\n            statusInactive?.classList.add('hidden');\n        }\n        else {\n            statusActive?.classList.add('hidden');\n            statusInactive?.classList.remove('hidden');\n        }\n    }\n}\n// Get current highlighting state\nasync function getHighlightingState(tabId) {\n    try {\n        const response = await chrome.tabs.sendMessage(tabId, { action: 'getHighlightingState' });\n        return response.isEnabled;\n    }\n    catch {\n        return false;\n    }\n}\n// Update button state\nasync function updateButtonState(isEnabled) {\n    const toggleButton = document.getElementById('toggleHighlight');\n    if (toggleButton) {\n        toggleButton.textContent = isEnabled ? 'Stop Highlighting' : 'Start Highlighting';\n        toggleButton.classList.toggle('bg-red-500', isEnabled);\n        toggleButton.classList.toggle('bg-primary-light', !isEnabled);\n    }\n}\n// Toggle highlighting\nasync function toggleHighlight() {\n    try {\n        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n        if (tab.id && tab.url) {\n            try {\n                const response = await chrome.tabs.sendMessage(tab.id, { action: 'toggleHighlight' });\n                await updateButtonState(response.isEnabled);\n            }\n            catch (messageError) {\n                // If content script is not ready, inject it and retry\n                await chrome.scripting.executeScript({\n                    target: { tabId: tab.id },\n                    files: ['content.js']\n                });\n                // Wait for content script to initialize\n                await new Promise(resolve => setTimeout(resolve, 500));\n                // Retry sending message\n                const response = await chrome.tabs.sendMessage(tab.id, { action: 'toggleHighlight' });\n                await updateButtonState(response.isEnabled);\n            }\n        }\n    }\n    catch (error) {\n        console.error('Failed to toggle highlight:', error);\n    }\n}\n// Clear highlights\nasync function clearHighlights() {\n    try {\n        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n        if (tab.id) {\n            await chrome.tabs.sendMessage(tab.id, { action: 'clearHighlights' });\n        }\n    }\n    catch (error) {\n        console.error('Failed to clear highlights:', error);\n    }\n}\n// Remove from whitelist\nasync function removeFromWhitelist(url) {\n    const whitelistedSites = await getWhitelist();\n    const hostname = new URL(url).hostname;\n    const updatedSites = whitelistedSites.filter(site => site !== hostname);\n    await chrome.storage.sync.set({ whitelistedSites: updatedSites });\n}\n// Toggle whitelist\nasync function toggleWhitelist() {\n    try {\n        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n        if (tab.url) {\n            const isCurrentlyWhitelisted = await isWhitelisted(tab.url);\n            const toggleWhitelistButton = document.getElementById('toggleWhitelist');\n            if (isCurrentlyWhitelisted) {\n                await removeFromWhitelist(tab.url);\n                if (toggleWhitelistButton) {\n                    toggleWhitelistButton.textContent = 'Add to Whitelist';\n                    toggleWhitelistButton.disabled = false;\n                }\n            }\n            else {\n                await addToWhitelist(tab.url);\n                if (toggleWhitelistButton) {\n                    toggleWhitelistButton.textContent = 'Added to Whitelist';\n                    toggleWhitelistButton.disabled = false;\n                }\n            }\n            // Notify background script to update whitelist status\n            await chrome.runtime.sendMessage({ action: 'whitelistUpdated', url: tab.url });\n            // Reload the page to ensure content script is properly initialized\n            if (tab.id) {\n                await chrome.tabs.reload(tab.id);\n            }\n        }\n    }\n    catch (error) {\n        console.error('Failed to toggle whitelist:', error);\n    }\n}\n// Open settings page\nfunction openSettings() {\n    chrome.runtime.openOptionsPage();\n}\n// Initialize popup\ndocument.addEventListener('DOMContentLoaded', async () => {\n    updateStatus();\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (tab.url && tab.id) {\n        const whitelisted = await isWhitelisted(tab.url);\n        const toggleWhitelistButton = document.getElementById('toggleWhitelist');\n        if (toggleWhitelistButton) {\n            toggleWhitelistButton.textContent = whitelisted ? 'Added to Whitelist' : 'Add to Whitelist';\n            toggleWhitelistButton.disabled = false;\n            toggleWhitelistButton.addEventListener('click', toggleWhitelist);\n        }\n        // Initialize button state based on current highlighting state\n        const isEnabled = await getHighlightingState(tab.id);\n        await updateButtonState(isEnabled);\n    }\n    document.getElementById('toggleHighlight')?.addEventListener('click', toggleHighlight);\n    document.getElementById('clearHighlights')?.addEventListener('click', clearHighlights);\n    document.getElementById('openSettings')?.addEventListener('click', (e) => {\n        e.preventDefault();\n        openSettings();\n    });\n});\n"],"names":["async","getWhitelist","whitelistedSites","chrome","storage","sync","get","isWhitelisted","url","hostname","URL","includes","updateButtonState","isEnabled","toggleButton","document","getElementById","textContent","classList","toggle","toggleHighlight","tab","tabs","query","active","currentWindow","id","response","sendMessage","action","messageError","scripting","executeScript","target","tabId","files","Promise","resolve","setTimeout","error","console","clearHighlights","toggleWhitelist","isCurrentlyWhitelisted","toggleWhitelistButton","updatedSites","filter","site","set","removeFromWhitelist","disabled","push","addToWhitelist","runtime","reload","addEventListener","statusElement","highlightSettings","apiKey","baseUrl","model","statusActive","querySelector","statusInactive","remove","add","updateStatus","whitelisted","getHighlightingState","e","preventDefault","openOptionsPage"],"sourceRoot":""}