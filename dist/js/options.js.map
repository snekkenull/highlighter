{"version":3,"file":"js/options.js","mappings":"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","sources":["webpack://highlighter/./src/colors.ts","webpack://highlighter/./src/options/options.ts"],"sourcesContent":["export const palette = {\n    // 主要颜色\n    primary: '#4A90E2',\n    secondary: '#50E3C2',\n    accent: '#F5A623',\n    // 语法高亮基础色\n    keyword: '#C678DD',\n    string: '#98C379',\n    comment: '#5C6370',\n    function: '#61AFEF',\n    variable: '#E06C75',\n    type: '#E5C07B',\n    // 背景色\n    background: {\n        dark: '#282C34',\n        light: '#FFFFFF',\n    },\n    // 文本颜色\n    text: {\n        dark: '#ABB2BF',\n        light: '#383A42',\n    },\n    // 高亮动画颜色\n    highlight: {\n        animation: {\n            start: localStorage.getItem('highlightStartColor') || 'rgba(74, 144, 226, 0.1)',\n            end: localStorage.getItem('highlightEndColor') || 'rgba(74, 144, 226, 0.3)',\n        }\n    }\n};\nexport const updateHighlightColors = (startColor, endColor) => {\n    palette.highlight.animation.start = startColor;\n    palette.highlight.animation.end = endColor;\n    localStorage.setItem('highlightStartColor', startColor);\n    localStorage.setItem('highlightEndColor', endColor);\n};\n","import '../styles/base.css';\nimport { updateHighlightColors } from '../colors';\nconst BASE_PROMPT = 'IMPORTANT: You must follow these rules exactly:\\n1. Return ONLY a JSON array of objects\\n2. Each object must have one property:\\n   - text: the exact text content to highlight\\n3. Format must be: [{\"text\": string}, ...]\\n4. No text before or after the JSON\\n5. No comments or explanations\\n6. No markdown formatting\\n7. Array can be empty but must be valid JSON\\n8. The \"text\" property must contain the exact text to highlight\\n9. Each text segment should be meaningful and complete\\n10. Do not include partial words or incomplete phrases\\n\\nAnalyze the following text and identify {purpose} to highlight.';\nfunction getFullPrompt(presetPrompt, customPrompt) {\n    const purpose = presetPrompt === 'custom' ? customPrompt : getPresetPurpose(presetPrompt);\n    return BASE_PROMPT.replace('{purpose}', purpose);\n}\nfunction getPresetPurpose(preset) {\n    const presets = {\n        gre: 'GRE vocabulary words',\n        important: 'important information and key points',\n        definition: 'term definitions and explanations',\n        conclusion: 'conclusions and summary statements'\n    };\n    return presets[preset] || '';\n}\n// Initialize color slider functionality\n// Helper function to convert hex to HSL\nconst hexToHSL = (hex) => {\n    let r = parseInt(hex.slice(1, 3), 16) / 255;\n    let g = parseInt(hex.slice(3, 5), 16) / 255;\n    let b = parseInt(hex.slice(5, 7), 16) / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s, l = (max + min) / 2;\n    if (max === min) {\n        h = s = 0;\n    }\n    else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h * 360, s: s * 100, l: l * 100 };\n};\n// Helper function to convert HSL to hex\nconst hslToHex = (h, s, l) => {\n    l /= 100;\n    const a = s * Math.min(l, 1 - l) / 100;\n    const f = (n) => {\n        const k = (n + h / 30) % 12;\n        const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n        return Math.round(255 * color).toString(16).padStart(2, '0');\n    };\n    return `#${f(0)}${f(8)}${f(4)}`;\n};\nfunction initializeColorSlider() {\n    const colorSlider = document.getElementById('colorSlider');\n    const colorIndicator = document.getElementById('colorIndicator');\n    if (!colorSlider || !colorIndicator) {\n        console.error('Color slider elements not found');\n        return;\n    }\n    // Load saved color and update input value\n    const savedColor = localStorage.getItem('highlightColor') || '#4A90E2';\n    // Helper function to convert hex to HSL\n    const hexToHSL = (hex) => {\n        let r = parseInt(hex.slice(1, 3), 16) / 255;\n        let g = parseInt(hex.slice(3, 5), 16) / 255;\n        let b = parseInt(hex.slice(5, 7), 16) / 255;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h = 0, s, l = (max + min) / 2;\n        if (max === min) {\n            h = s = 0;\n        }\n        else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s: s * 100, l: l * 100 };\n    };\n    // Helper function to convert HSL to hex\n    const hslToHex = (h, s, l) => {\n        l /= 100;\n        const a = s * Math.min(l, 1 - l) / 100;\n        const f = (n) => {\n            const k = (n + h / 30) % 12;\n            const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n            return Math.round(255 * color).toString(16).padStart(2, '0');\n        };\n        return `#${f(0)}${f(8)}${f(4)}`;\n    };\n    // Function to update color\n    const updateColor = (hex) => {\n        const hsl = hexToHSL(hex);\n        colorSlider.value = hsl.h.toString();\n        colorIndicator.style.left = `${(hsl.h / 360) * 100}%`;\n        localStorage.setItem('highlightColor', hex);\n        updateHighlightColors(hex, hex);\n    };\n    // Set initial value\n    updateColor(savedColor);\n    // Event listener for color slider\n    colorSlider.addEventListener('input', (e) => {\n        const hue = parseInt(e.target.value);\n        const hex = hslToHex(hue, 70, 60); // Fixed saturation and lightness for consistent colors\n        colorIndicator.style.left = `${(hue / 360) * 100}%`;\n        updateColor(hex);\n    });\n    // Add dragging functionality\n    let isDragging = false;\n    const sliderRect = colorSlider.getBoundingClientRect();\n    const updateColorFromPosition = (clientX) => {\n        const position = Math.max(0, Math.min(1, (clientX - sliderRect.left) / sliderRect.width));\n        const hue = Math.round(position * 360);\n        const hex = hslToHex(hue, 70, 60);\n        colorSlider.value = hue.toString();\n        colorIndicator.style.left = `${position * 100}%`;\n        updateColor(hex);\n    };\n    colorIndicator.addEventListener('mousedown', () => {\n        isDragging = true;\n    });\n    document.addEventListener('mousemove', (e) => {\n        if (isDragging) {\n            updateColorFromPosition(e.clientX);\n        }\n    });\n    document.addEventListener('mouseup', () => {\n        isDragging = false;\n    });\n}\n// Save settings to chrome.storage\nasync function saveSettings() {\n    const saveButton = document.getElementById('save');\n    const originalText = saveButton.textContent;\n    saveButton.textContent = 'Saving...';\n    saveButton.disabled = true;\n    try {\n        const presetPrompt = document.getElementById('presetPrompt').value;\n        const customPrompt = document.getElementById('customPrompt').value;\n        const colorSlider = document.getElementById('colorSlider');\n        const hue = parseInt(colorSlider?.value || '0');\n        const highlightColor = hslToHex(hue, 70, 60);\n        const settings = {\n            apiKey: document.getElementById('apiKey').value,\n            baseUrl: document.getElementById('baseUrl').value,\n            model: document.getElementById('model').value,\n            presetPrompt: presetPrompt,\n            customPrompt: customPrompt,\n            prompt: getFullPrompt(presetPrompt, customPrompt),\n            highlightColor: highlightColor,\n            apiRateLimit: parseInt(document.getElementById('apiRateLimit').value),\n            maxCacheSize: parseInt(document.getElementById('maxCacheSize').value),\n            maxRetries: parseInt(document.getElementById('maxRetries').value),\n            retryDelay: parseInt(document.getElementById('retryDelay').value)\n        };\n        await chrome.storage.sync.set({ highlightSettings: settings });\n        saveButton.textContent = 'Saved!';\n        setTimeout(() => {\n            saveButton.textContent = 'Save';\n            saveButton.disabled = false;\n        }, 2000);\n    }\n    catch (error) {\n        console.error('Failed to save settings:', error);\n        const status = document.getElementById('status');\n        if (status) {\n            status.textContent = 'Failed to save settings';\n            status.classList.add('visible');\n            setTimeout(() => {\n                status.classList.remove('visible');\n            }, 2000);\n        }\n    }\n}\n// Show saved message\nfunction showSavedMessage() {\n    const status = document.getElementById('status');\n    if (status) {\n        status.textContent = 'Settings saved!';\n        status.classList.add('visible');\n        setTimeout(() => {\n            status.textContent = '';\n            status.classList.remove('visible');\n        }, 2000);\n    }\n}\n// Load settings from chrome.storage\nasync function loadSettings() {\n    try {\n        const { highlightSettings: settings } = await chrome.storage.sync.get({\n            highlightSettings: {\n                apiKey: '',\n                baseUrl: 'https://api.openai.com',\n                model: 'gpt-3.5-turbo',\n                presetPrompt: 'important',\n                customPrompt: '',\n                prompt: getFullPrompt('important', ''),\n                highlightColor: '#4A90E2',\n                apiRateLimit: 5000,\n                maxCacheSize: 100,\n                maxRetries: 3,\n                retryDelay: 1000\n            }\n        });\n        document.getElementById('apiKey').value = settings.apiKey;\n        document.getElementById('baseUrl').value = settings.baseUrl;\n        document.getElementById('model').value = settings.model;\n        document.getElementById('presetPrompt').value = settings.presetPrompt;\n        document.getElementById('customPrompt').value = settings.customPrompt;\n        document.getElementById('prompt').value = settings.prompt;\n        // Update color slider based on saved highlight color\n        const colorSlider = document.getElementById('colorSlider');\n        if (colorSlider) {\n            const hsl = hexToHSL(settings.highlightColor);\n            colorSlider.value = hsl.h.toString();\n            const colorIndicator = document.getElementById('colorIndicator');\n            if (colorIndicator) {\n                colorIndicator.style.left = `${(hsl.h / 360) * 100}%`;\n            }\n        }\n        document.getElementById('apiRateLimit').value = String(settings.apiRateLimit || 5000);\n        document.getElementById('maxCacheSize').value = String(settings.maxCacheSize || 100);\n        document.getElementById('maxRetries').value = String(settings.maxRetries || 3);\n        document.getElementById('retryDelay').value = String(settings.retryDelay || 1000);\n        updateCustomPromptVisibility();\n    }\n    catch (error) {\n        console.error('Failed to load settings:', error);\n    }\n}\nfunction updateCustomPromptVisibility() {\n    const presetSelect = document.getElementById('presetPrompt');\n    const customPromptGroup = document.getElementById('customPromptGroup');\n    if (customPromptGroup) {\n        customPromptGroup.style.display = presetSelect.value === 'custom' ? 'block' : 'none';\n    }\n}\n// Initialize Advanced Settings toggle\nfunction initializeAdvancedSettings() {\n    const toggle = document.getElementById('advancedSettingsToggle');\n    const content = document.getElementById('advancedSettingsContent');\n    const icon = document.getElementById('advancedSettingsIcon');\n    if (toggle && content && icon) {\n        // Set initial state\n        content.style.maxHeight = '0px';\n        icon.style.transform = 'rotate(0deg)';\n        toggle.addEventListener('click', () => {\n            const isExpanded = content.style.maxHeight !== '0px';\n            content.style.maxHeight = isExpanded ? '0px' : content.scrollHeight + 'px';\n            icon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(180deg)';\n        });\n    }\n}\n// Load and display whitelisted sites\nasync function loadWhitelistedSites() {\n    try {\n        const { whitelistedSites = [] } = await chrome.storage.sync.get({ whitelistedSites: [] });\n        const container = document.getElementById('whitelistContainer');\n        if (container) {\n            container.innerHTML = '';\n            whitelistedSites.forEach((site) => {\n                const item = document.createElement('div');\n                item.className = 'flex justify-between items-center p-2 bg-gray-50 rounded';\n                item.innerHTML = `\n          <span class=\"text-gray-700\">${site}</span>\n          <button class=\"text-red-500 hover:text-red-700 focus:outline-none\" data-site=\"${site}\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n          </button>\n        `;\n                container.appendChild(item);\n            });\n            // Add click handlers for remove buttons\n            container.querySelectorAll('button').forEach(button => {\n                button.addEventListener('click', async () => {\n                    const site = button.getAttribute('data-site');\n                    if (site) {\n                        const { whitelistedSites = [] } = await chrome.storage.sync.get({ whitelistedSites: [] });\n                        const updatedSites = whitelistedSites.filter((s) => s !== site);\n                        await chrome.storage.sync.set({ whitelistedSites: updatedSites });\n                        loadWhitelistedSites(); // Reload the list\n                    }\n                });\n            });\n        }\n    }\n    catch (error) {\n        console.error('Failed to load whitelisted sites:', error);\n    }\n}\n// Add new site to whitelist\nasync function addSiteToWhitelist(site) {\n    try {\n        const { whitelistedSites = [] } = await chrome.storage.sync.get({ whitelistedSites: [] });\n        if (!whitelistedSites.includes(site)) {\n            whitelistedSites.push(site);\n            await chrome.storage.sync.set({ whitelistedSites });\n            loadWhitelistedSites(); // Reload the list\n            return true;\n        }\n        return false;\n    }\n    catch (error) {\n        console.error('Failed to add site to whitelist:', error);\n        return false;\n    }\n}\n// Initialize color slider functionality\n// Event listeners\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        await loadSettings();\n        await loadWhitelistedSites(); // Load whitelisted sites\n        initializeAdvancedSettings();\n        initializeColorSlider(); // Add color slider initialization\n        // Listen for storage changes to update whitelist in real-time\n        chrome.storage.onChanged.addListener((changes, namespace) => {\n            if (namespace === 'sync' && changes.whitelistedSites) {\n                loadWhitelistedSites(); // Reload the whitelist when it changes\n            }\n        });\n        // Add event listener for the whitelist input\n        const addButton = document.getElementById('addToWhitelist');\n        const input = document.getElementById('whitelistInput');\n        addButton?.addEventListener('click', async () => {\n            if (input?.value) {\n                const site = input.value.trim();\n                if (await addSiteToWhitelist(site)) {\n                    input.value = ''; // Clear input after successful add\n                }\n            }\n        });\n        document.getElementById('save')?.addEventListener('click', saveSettings);\n        document.getElementById('presetPrompt')?.addEventListener('change', updateCustomPromptVisibility);\n        document.getElementById('resetPrompt')?.addEventListener('click', () => {\n            const promptTextarea = document.getElementById('prompt');\n            if (promptTextarea) {\n                promptTextarea.value = BASE_PROMPT;\n            }\n        });\n    }\n    catch (error) {\n        console.error('Failed to initialize options page:', error);\n    }\n});\n"],"names":["palette","primary","secondary","accent","keyword","string","comment","function","variable","type","background","dark","light","text","highlight","animation","start","localStorage","getItem","end","BASE_PROMPT","getFullPrompt","presetPrompt","customPrompt","replace","gre","important","definition","conclusion","async","saveSettings","saveButton","document","getElementById","textContent","disabled","value","colorSlider","highlightColor","h","a","Math","min","l","f","n","k","color","max","round","toString","padStart","hslToHex","parseInt","settings","apiKey","baseUrl","model","prompt","apiRateLimit","maxCacheSize","maxRetries","retryDelay","chrome","storage","sync","set","highlightSettings","setTimeout","error","console","status","classList","add","remove","updateCustomPromptVisibility","presetSelect","customPromptGroup","style","display","loadWhitelistedSites","whitelistedSites","get","container","innerHTML","forEach","site","item","createElement","className","appendChild","querySelectorAll","button","addEventListener","getAttribute","updatedSites","filter","s","hsl","hex","r","slice","g","b","d","hexToHSL","colorIndicator","left","String","loadSettings","toggle","content","icon","maxHeight","transform","isExpanded","scrollHeight","initializeAdvancedSettings","savedColor","updateColor","startColor","endColor","setItem","e","hue","target","isDragging","sliderRect","getBoundingClientRect","clientX","position","width","updateColorFromPosition","initializeColorSlider","onChanged","addListener","changes","namespace","addButton","input","trim","includes","push","addSiteToWhitelist","promptTextarea"],"sourceRoot":""}